<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Brand;
use App\Category;
use App\Subcategory;
use App\Subsubcategory;
use Carbon\Carbon;
use App\Product;
use App\Productimage;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Validation\Rules\Exists;
use Intervention\Image\Facades\Image;




class ProductController extends Controller
{
    //Product Add Form
    public function add_form()
    {
        //product code generate
        $products = Product::all();
        $productcode = '';
        $start = 10000;
        if(count($products)==0)
        {
            $productcode = $start + 1;
        }
        else
        {
            $productcode = count($products) + $start + 1;
        }

        //get all other data
        $brands = Brand::all();
        $categories = Category::all();  
        $subcategories = Subcategory::all();
        $subsubcategories = Subsubcategory::all();
        return view('backend.product.add_form', compact('productcode','brands','categories','subcategories','subsubcategories'));
    }

    //Product store
    public function store(Request $request)
    {
        //dd($request->all());
        //validation  
        $request->validate([
            'product_name' => 'required|max:255',
            'product_code_gen' => 'required',
            'brandid' => 'required',
            'catid' => 'required',
            'subcatid' => 'required',
            'subsubcatid' => 'required',
            'product_qty' => 'required',
            'saling_price' => 'required',
            'product_thambnail' => 'required|image|mimes:jpeg,png,jpg',
            'shortdescp' => 'required|max:255',
            'longdescp' => 'required',
        ],
        [
            'product_name.required' => 'Product Name Required',
            'product_name.max' => 'Maximum 255 chars',
        ]);

        //dd($request->all());
        
        $product_thambnail = $request->file('product_thambnail'); 
        $product_thambnail_name_gen = hexdec(uniqid()).'.'.$product_thambnail->getClientOriginalExtension();
        Image::make($product_thambnail)->resize(600,600)->save('img/product/thambnail/'.$product_thambnail_name_gen);

        $product_thambnail_image = 'img/product/thambnail/'.$product_thambnail_name_gen;


        $hot_deals = $request->hot_deals==1 ? 1:0;
        $featured = $request->featured==1 ? 1:0;
        $special_offer = $request->special_offer==1 ? 1:0;
        $special_deals = $request->special_deals==1 ? 1:0;

        //Insert data and get id
        $id = Product::insertGetId([
            'product_name'=> trim($request->product_name),
            'product_code'=> $request->product_code_gen,
            'modelnumber'=> trim($request->modelnumber),
            'brandid'=> $request->brandid,
            'catid'=> $request->catid,
            'subcatid'=> $request->subcatid,
            'subsubcatid'=> $request->subsubcatid,
            'product_qty'=> $request->product_qty,
            'product_size'=> $request->product_size,
            'product_color'=> $request->product_color,
            'saling_price'=> $request->saling_price,
            'discount_price'=> $request->discount_price,
            'shortdescp'=> $request->shortdescp,
            'longdescp'=> $request->longdescp,
            'hot_deals'=> $hot_deals,
            'featured'=> $featured,
            'special_offer'=> $special_offer,
            'special_deals'=> $special_deals,
            'product_tags'=> $request->product_tags,
            'product_slug'=> strtolower(str_replace(' ','-',$request->product_name)),
            'product_thambnail'=> $product_thambnail_image,
            'userid'=> Auth::user()->id,
            'created_at'=>Carbon::now(),
        ]); 

        

        //Product Multiple Image Upload with product id
        $productimage = $request->file('productimage');
        if($productimage)
        {
            foreach($productimage as $pimage)
            {
                if($pimage->getClientOriginalExtension() == 'png' || $pimage->getClientOriginalExtension()=='jpg'||$pimage->getClientOriginalExtension()=='jpeg')
                {
                    $name_gen = hexdec(uniqid()).'.'.$pimage->getClientOriginalExtension();
                    Image::make($pimage)->resize(200,200)->save('img/product/multipleimage/'.$name_gen);

                    //Insert image data 
                    Productimage::insert([
                        'productid'=>$id,
                        'productimage'=>'img/product/multipleimage/'.$name_gen,
                        'created_at'=>Carbon::now(),
                    ]);
                }

            }
        }

        return Redirect()->back()->with('success','Saved Successfully');
    }

    

    //Product List view
    public function view()
    {
        $products = Product::latest()->paginate(5);
        return view('backend.product.view',compact('products'));
    }

    //product edit
    public function edit($id)
    {
        //get product info by id
        $products = Product::find($id);
        $brands = Brand::all();
        $categories = Category::all();
        $subcategories = Subcategory::all();
        $subsubcategories = Subsubcategory::all();
        return view('backend.product.edit',compact('products','brands','categories','subcategories','subsubcategories'));
    }

    //product update
    public function update(Request $request, $id)
    {
        //dd($request->all());
        //validation  
        $request->validate([
            'product_name' => 'required|max:255',
            'product_code_gen' => 'required',
            'brandid' => 'required',
            'catid' => 'required',
            'product_qty' => 'required',
            'saling_price' => 'required',
            'shortdescp' => 'required|max:255',
            'longdescp' => 'required',
        ],
        [
            'product_name.required' => 'Product Name Required',
            'product_name.max' => 'Maximum 255 chars',
        ]);

        //dd($request->all());
        // echo $request->category_name;die;

        $old_subcatid = $request->old_subcatid;
        $old_subsubcatid = $request->old_subsubcatid;
        $subcatid = $request->subcatid;
        $subsubcatid = $request->subsubcatid;

        //condition for subcategory
        if($subcatid ==""){$subcatid = $old_subcatid;}
        else if($old_subcatid == $subcatid){$subcatid = $old_subcatid;}
        else{$subcatid = $request->subcatid;}

        //condition for subsubcategory
        if($subsubcatid ==""){$subsubcatid = $old_subsubcatid;}
        else if($old_subsubcatid == $subsubcatid){$subsubcatid = $old_subsubcatid;}
        else{$subsubcatid = $request->subsubcatid;}

        $hot_deals = $request->hot_deals==1 ? 1:0;
        $featured = $request->featured==1 ? 1:0;
        $special_offer = $request->special_offer==1 ? 1:0;
        $special_deals = $request->special_deals==1 ? 1:0;

                
        //Insert data and get id
        Product::find($id)->update([
            'product_name'=> trim($request->product_name),
            'product_code'=> $request->product_code_gen,
            'modelnumber'=> trim($request->modelnumber),
            'brandid'=> $request->brandid,
            'catid'=> $request->catid,
            'subcatid'=> $subcatid,
            'subsubcatid'=> $subsubcatid,
            'product_qty'=> $request->product_qty,
            'product_size'=> $request->product_size,
            'product_color'=> $request->product_color,
            'saling_price'=> $request->saling_price,
            'discount_price'=> $request->discount_price,
            'shortdescp'=> $request->shortdescp,
            'longdescp'=> $request->longdescp,
            'hot_deals'=> $hot_deals,
            'featured'=> $featured,
            'special_offer'=> $special_offer,
            'special_deals'=> $special_deals,
            'product_tags'=> $request->product_tags,
            'product_slug'=> strtolower(str_replace(' ','-',$request->product_name)),
            'status'=> $request->status,
            'userid'=> Auth::user()->id,
            'updated_at'=>Carbon::now(),
        ]);

        return Redirect()->back()->with('success','Updated Successfully');
    }

    //product delete
    public function delete($id)
    {
        //get productimage by product id and then delete 
        $product = Product::findOrFail($id);
        //delete thambnail image
        if(is_file($product->product_thambnail))
        {
            unlink($product->product_thambnail);
        }
        
        //delete multiple image
        $productimages = Productimage::all();
        if(count($productimages)>0)
        {
            foreach($productimages as $aproductimage)
            {
                if($aproductimage->productid == $id)
                {
                    if(file_exists($aproductimage->productimage))
                    {
                        unlink($aproductimage->productimage);
                    }
                    Productimage::find($aproductimage->id)->delete();
                }
            }
        }

        //delete product by id
        Product::find($id)->delete();

        return Redirect()->back()->with('success','Deleted Successfully');
    }

    //product imageview by product id
    public function imageview($id)
    {
        //get product image by id
        //$productimages = Productimage::where('productid', $id)->pluck('name', 'surname');
        $selectedproduct = Product::find($id);
        $productmultipleimages = Productimage::where('productid', $id)->get(); 
        return view('backend.product.imageview',compact('selectedproduct','productmultipleimages'));
    }

    //add more product image multiple
    public function productimage_addmore($id)
    {
        $productid = $id;
        return view('backend.product.addmore_product_image', compact('productid'));
    }
    public function productimage_addmore_upload(Request $request)
    {
        $productid = $request->productid; 

        //Product Multiple Image Upload with product id
        $productimage = $request->file('productimage');
        if($productimage)
        {
            foreach($productimage as $pimage)
            {
                if($pimage->getClientOriginalExtension()=='png'||$pimage->getClientOriginalExtension()=='jpg'||$pimage->getClientOriginalExtension()=='jpeg')
                {
                    $name_gen = hexdec(uniqid()).'.'.$pimage->getClientOriginalExtension();
                    Image::make($pimage)->resize(200,200)->save('img/product/multipleimage/'.$name_gen);

                    //Insert image data 
                    Productimage::insert([
                        'productid'=>$productid,
                        'productimage'=>'img/product/multipleimage/'.$name_gen,
                        'created_at'=>Carbon::now(),
                    ]);

                }
            }
        }

        //Toaster Message
        $notification = array(
            'message' => 'Product image uploaded',
            'alert-type' => 'success'
        );

        return Redirect()->back()->with($notification);
        

    }

    //edit productimage multiple
    public function edit_productimage($id)
    {
        //get data
        $productimagedata = Productimage::find($id);
        return view('backend.product.productimage_edit', compact('productimagedata'));
    }

    //update productimage multiple
    public function update_productimage(Request $request,$id)
    {
        //validation  
        $request->validate([
            'productimage' => 'required|mimes:jpg,jpeg,png,gif',
        ]);
        //productimageinfo before modify
        $pre_productimageinfo = Productimage::find($id);
        $productid = $pre_productimageinfo->productid;
        $oldproductimage = $pre_productimageinfo->productimage;


        $productimage = $request->file('productimage');
        if($productimage)
        {
                $name_gen = hexdec(uniqid()).'.'.$productimage->getClientOriginalExtension();
                Image::make($productimage)->resize(200,200)->save('img/product/multipleimage/'.$name_gen);

                //delete old image
                if(is_file($oldproductimage))
                {
                    unlink($oldproductimage);
                }
                

                //Insert image data 
                Productimage::find($id)->update([
                    'productid'=>$productid,
                    'productimage'=>'img/product/multipleimage/'.$name_gen,
                    'updated_at'=>Carbon::now(),
                ]);
        }

        //Toaster Message
        $notification = array(
            'message' => 'Product image changed',
            'alert-type' => 'success'
        );

        return Redirect()->back()->with($notification);
        //return redirect('product/imageview/'.$productid);
        //return $this->imageview($productid);

    }

    //delete productimage multiple
    public function delete_productimage($id)
    {
        //Get info
        $productImagesData = Productimage::find($id); 
        $productid = $productImagesData->productid; 
        $image = $productImagesData->productimage; 
        
        //delete info
        Productimage::find($id)->delete();
        //delete image
        if(is_file($image))
        {
            unlink($image);
        }
        
        return redirect('product/imageview/'.$productid);
    }

    //edit_productthumbnailimage
    public function edit_productthumbnailimage($id)
    {
        $product = Product::findOrFail($id);
        return view('backend.product.edit_productthumbnailimage',compact('product'));
    }
    
    //change_thumbnail
    public function change_thumbnail(Request $request,$id)
    {
        //dd($request->all());
        $request->validate([
            'product_thambnail' => 'required|mimes:jpeg,jpg,png,gif'
        ]);

        $old_thumnail = $request->old_thumnail;
        $new_product_thambnail = $request->file('product_thambnail');
        if(is_file($new_product_thambnail))
        {
            //delete old image
            if(is_file($old_thumnail))
            {
                unlink($old_thumnail);
            }
            
            //create new image
            $image_name_gen = hexdec(uniqid()).'.'.$new_product_thambnail->getClientOriginalExtension();
            Image::make($new_product_thambnail)->resize(600,600)->save('img/product/thambnail/'.$image_name_gen);

            $new_product_thambnail_image_with_path = 'img/product/thambnail/'.$image_name_gen;
            
            //update product table by id
            Product::findOrFail($id)->update([
                'product_thambnail' => $new_product_thambnail_image_with_path,
                'updated_at' => Carbon::now(),
            ]);

            //Toaster Message
            $notification = array(
                'message' => 'Product thambnail changed',
                'alert-type' => 'success'
            );

            return Redirect()->back()->with($notification);

        }








        
    }











}
